		**************************************************************									POLYMORPHISM:- 
		**************************************************************
----->	 The word polymorphism means having many forms. 
	 In simple words, we can define polymorphism as 
	 the ability of a message to be displayed in more
	 than one form. Real-life Illustration: Polymorphism

------>	A person at the same time can have different characteristics.
	Like a man at the same time is a father, a husband, an employee.
	So the same person possesses different behavior in different situations. 
	This is called polymorphism. 

------>	Polymorphism is considered one of the important features of
Object-Oriented Programming. Polymorphism allows us to perform a 
single action in different ways. In other words, polymorphism allows 
you to define one interface and have multiple implementations.
The word “poly” means many and “morphs” means forms, So it means many forms.

Types of polymorphism  
**********************
In Java polymorphism is mainly divided into two types: 

	------>	Compile-time Polymorphism 	(Method overloading)
	------>	Runtime Polymorphism		(Method overridding)

Type 1: Compile-time polymorphism
**********************************
	It is also known as static polymorphism. 
	This type of polymorphism is achieved by 
	function overloading or operator overloading. 
	---------------------------------------------------------
	|Note: But Java doesn’t support the Operator Overloading|
	---------------------------------------------------------

Method Overloading: 
*******************
	When there are multiple functions with the same name but 
	different parameters then these functions are said to be overloaded.
	Functions can be overloaded by change in the number of arguments 
	or/and a change in the type of arguments.

Example 1 
````````````
	class Helper {
	
	static int Multiply(int a, int b)
	{
		return a * b;
	}
	static double Multiply(double a, double b)
	{
		return a * b;
	}
	}

	// Class 2
	// Main class
	class GFG {
	public static void main(String[] args)
	{
	System.out.println(Helper.Multiply(2, 4));
	System.out.println(Helper.Multiply(5.5, 6.3));
	}
	}
________
Output: |
8	|
34.65	|
________|

Type 2: Runtime polymorphism
*****************************

	***It is also known as Dynamic Method Dispatch. It is a process 
	   in which a function call to the overridden method is resolved
	   at Runtime. This type of polymorphism is achieved by Method 
	   Overriding. 
	***Method overriding, on the other hand, occurs when a derived
	   class has a definition for one of the member functions of 
	   the base class. That base function is said to be overridden.
EXAMPLE:-
````````````
	class Parent {
	void Print()
	{
	System.out.println("parent class");
	}
	}
	class subclass1 extends Parent {
	void Print() { System.out.println("subclass1"); }
	}

	class subclass2 extends Parent {
	void Print()
	{
	System.out.println("subclass2");
	}
	}

	class GFG {
	public static void main(String[] args)
	{
	Parent a;
	a = new subclass1();
	a.Print();
	a = new subclass2();
	a.Print();
	}
	}
__________
Output:   |
subclass1 |
subclass2 |
__________|
