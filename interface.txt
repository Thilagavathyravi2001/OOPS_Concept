	---------------------------------------------------------------------------
    		 ********************* INTERFACE ***********************
	---------------------------------------------------------------------------  
    Definition:-
    ************
	---->	An Interface in Java programming language is defined as
		an abstract type used to specify the behavior of a class. 
		An interface in Java is a blueprint of a class. 
		A Java interface contains static constants and abstract methods.

----->	The interface in Java is a mechanism to achieve abstraction. 
	There can be only abstract methods in the Java interface, 
	not the method body. It is used to achieve abstraction and 
	multiple inheritance in Java. In other words, you can say 
	that interfaces can have abstract methods and variables. 
	It cannot have a method body. 
	Java Interface also represents the IS-A relationship.

----->	Like a class, an interface can have methods and variables, 
	but the methods declared in an interface are by default abstract
	(only method signature, no body). 

----->	If a class implements an interface and does not provide method bodies 
	for all functions specified in the interface, then the class must be 
	declared abstract. A Java library example is Comparator Interface. 
	If a class implements this interface, then it can be used to sort a 
	collection.

-----------
Syntax:
-----------
	interface {
   	  // declare constant fields
    	 // declare methods that abstract 
    	// by default.   
	}
------------
Example:-
------------

	interface In1 {
	// public, static and final
	final int a = 10;

	// public and abstract
	void display();
	}

	class TestClass implements In1 {
	public void display(){
	System.out.println("Geek");
	}
	public static void main(String[] args)
	{
	TestClass t = new TestClass();
	t.display();
	System.out.println(a);
	}
	}
-----------
Output:	  |
Geek	  |
10	  |
-----------